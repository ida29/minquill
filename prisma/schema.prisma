datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]  @relation("Follower")
  followings    Follow[]  @relation("Following")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          Int      @id @default(autoincrement())
  ulid        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(false)
  title       String   @db.VarChar(255)
  content     String?  @db.VarChar(2000)
  author      User     @relation(fields: [authorId], references: [username])
  authorId    String
  comments    Comment[]
  likes       Like[]

  @@index([authorId])
}

model Comment {
  id              Int            @id @default(autoincrement())
  userId          String
  postId          Int?
  serviceId       Int?
  commentText     String
  createdAt       DateTime       @default(now())
  user            User           @relation(fields: [userId], references: [id])
  post            Post?          @relation(fields: [postId], references: [id])

  @@index([userId, postId])
  @@index([userId, serviceId])
}

model Like {
  id             Int     @id @default(autoincrement())
  userId         String
  postId         Int?
  serviceId      Int?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
  post           Post?    @relation(fields: [postId], references: [id])

  @@index([userId, postId])
  @@index([userId, serviceId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

enum Role {
  USER
  ADMIN
}

