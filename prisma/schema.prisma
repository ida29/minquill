datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(cuid())
  username         String?    @unique
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  stripeCustomerId String?    @unique
  isActive         Boolean    @default(false)
  role             Role       @default(USER)
  articles         Article[]
  photos           Photo[]
  comments         Comment[]
  likes            Like[]
  followers        Follow[]   @relation("Follower")
  followings       Follow[]   @relation("Following")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id        Int    @id @default(autoincrement())
  name      String @unique @map("name")
  articles  Article[] @relation("article_tag")
  photos    Photo[] @relation("photo_tag")

  @@map("tags")
}

model Article {
  id               Int      @id @default(autoincrement())
  ulid             String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  published        Boolean  @default(false)
  title            String   @db.VarChar(255)
  tokenizedTitle   String   @db.VarChar(255)
  content          String?  @db.Text
  tokenizedContent String?  @db.Text
  coverImg         String?  @db.VarChar(255)
  author           User     @relation(fields: [authorId], references: [username])
  authorId         String
  comments         Comment[]
  likes            Like[]
  tags             Tag[]    @relation("article_tag")

  @@index([authorId])
  @@fulltext([tokenizedContent, tokenizedTitle])
  @@map("articles")
}

model Photo {
  id               Int      @id @default(autoincrement())
  ulid             String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  published        Boolean  @default(false)
  title            String   @db.VarChar(255)
  tokenizedTitle   String   @db.VarChar(255)
  url              String   @db.VarChar(255)
  photographer     User     @relation(fields: [photographerId], references: [username])
  photographerId   String
  comments         Comment[]
  likes            Like[]
  tags             Tag[]    @relation("photo_tag")

  @@index([photographerId])
  @@fulltext([tokenizedTitle])
  @@map("photos")
}

model Comment {
  id              Int      @id @default(autoincrement())
  userId          String
  articleId       String?
  photoId         String?
  commentText     String
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
  article         Article? @relation(fields: [articleId], references: [ulid])
  photo           Photo?   @relation(fields: [photoId], references: [ulid])
  likes           Like[]

  @@index([userId, articleId])
  @@index([userId, photoId])
}

model Like {
  id             Int      @id @default(autoincrement())
  userId         String
  articleId      String?
  photoId        String?
  commentId      Int?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
  article        Article? @relation(fields: [articleId], references: [ulid])
  photo          Photo?   @relation(fields: [photoId], references: [ulid])
  comment        Comment? @relation(fields: [commentId], references: [id])

  @@index([userId, articleId])
  @@index([userId, photoId])
  @@index([userId, commentId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

enum Role {
  USER
  ADMIN
}

